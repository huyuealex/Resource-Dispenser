This is the README file for this project.

Hello, world!
Hello, world, too!

srd 说明:
srd(simple rd)为一个支持两种优先级的调度器,其倾向于饿死其他进程.

添加高优先级进程的pid 1234:	echo 'a 1234'>/proc/rdnice
删除高优先级进程的pid 1234:	echo 'd 1234'>/proc/rdnice
删除全部的高优先即进程:		echo 'r'>/proc/rdnice
查看所有的高优先级进程的pid:	cat /proc/rdnice

iotest.c 说明:
    使用格式:iotest [-f <file>] [-v <interval>] [-w] [-p]
    该程序对文件<file>进行读测试(若未指定<file>,则尝试读取文件 iotest_source),若指定 -v <interval> ,则该程序大致每完成百分之<interval> 就输出一次进度(注意interval为整数)
    -p 属性会在程序一开始时答应本进程的pid
    -w 属性会使程序在一开始时等待回车继续

nsrd的相关文件均放在nsrd目录下，主要文件如下：

rd-iosched.c(实现nsrd)：
	nsrd(not simple rd)为一个支持多优先级进程的调度器，目前已不会饿死低优先级的进程
	与/proc/rdnice的交互方法：(命令仍为 $ echo "***" > /proc/rdnice)
		add pid prio	#将进程id为pid的进程优先级设置为prio
		remove pid	#移除进程id为pid的优先级
		clear		#清除所有进程的优先级
		threshold val	#将threshold的值设为val
	已完成：避免饿死低优先级进程
	方法：加入随机调度策略，即随机抽取一个队列处理里面的请求，这样我们有两种调度方法。每次要处理一个请求时，按照一定概率(由threshold控制)，从两种策略中选择一种进行调度。这样通过设定较为合理的threshold值，既可以实现进程优先级调度，也可以避免请求被饿死。
	对于threshold的说明：一个介于0和DEN(目前设为10007)之间的阀值，在选择方法时，由系统产生一个(0, DEN)内的随机数，该随机数如果小于等于threshold，使用随机调度，否则使用优先级调度。

new_iotest.c：
	使用格式：new_iotest (不用加任何参数)
	注意：
		1. 在同目录下需有测试读取的文件，文件名为file1.txt, file2.txt, ... , file12.txt共12个文件，大小为50M即可清楚看到结果
		2. 程序中有运行shell命令，可能会有权限问题，运行前 $ sudo su一下最好，当然如果没有密码的话直接 $ sudo ./new_iotest也可
	说明：在原来iotest基础上，改进为多进程，为测试nsrd量身打造，与/prio传输信息均在运行时自动进行，挂载nsrd后，把上面提到的12个文件放在同目录下，一运行此程序，效果清晰明显
	已完成：把各进程打印的信息合并起来输出到一个文件log，以便查看，利用多进程共享内存+互斥锁实现

log_infor.c:
	对new_iotest.c测试所得的log进行统计分析，以便对nsrd进行评估
	统计方法：对于某一优先级进程，当它读取完一定百分比的文件时，统计有多少个优先级比它低且时间上已在它之前读取到这个百分比的进程，最后得到一个总和，记为error，所需信息可从log中获得。
	具体实现：threshold的值分别取0，1000，2000，...，10007(max)，对于每一个threshold值，运行20次new_iotest，将获得的20个error值求平均，最后进行比较。
	结果：统计的结果见result.txt，其中进程之间比较的总数为3000。可以看到，随着threshold值的增大(意味着更多的使用随机调度而不是优先级调度)，error值也增大(意味着进程的优先级作用越来越弱)。当threshold的值为0时，error值接近0，此时完全使用优先级调度；当threshold的值为max时，error值接近总数3000的一半，此时完全使用随机调度。从统计结果来看，nsrd基本令人满意。

tool目录下包含一些为了方便调试而写的脚本文件
